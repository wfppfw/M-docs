import{_ as e,o as r,c as o,a as t}from"./app.f245760f.js";const g=JSON.parse('{"title":"Using promises","description":"","frontmatter":{},"headers":[{"level":2,"title":"# Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"# Can I use promises?","slug":"can-i-use-promises","link":"#can-i-use-promises","children":[]},{"level":2,"title":"# How to use promises","slug":"how-to-use-promises","link":"#how-to-use-promises","children":[{"level":3,"title":"# Converting a callback to a promise","slug":"converting-a-callback-to-a-promise","link":"#converting-a-callback-to-a-promise","children":[]},{"level":3,"title":"# Error handling","slug":"error-handling","link":"#error-handling","children":[]},{"level":3,"title":"# Using async/await","slug":"using-async-await","link":"#using-async-await","children":[]}]}],"relativePath":"chromedocs/In depth_ core concepts/Using promises - Chrome Developers.md"}'),a={name:"chromedocs/In depth_ core concepts/Using promises - Chrome Developers.md"},s=t(`<ul><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#introduction" target="_blank" rel="noreferrer">Introduction</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#can-i-use-promises" target="_blank" rel="noreferrer">Can I use promises?</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#how-to-use-promises" target="_blank" rel="noreferrer">How to use promises</a><ul><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#compare-to-callback" target="_blank" rel="noreferrer">Converting a callback to a promise</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#error-handling" target="_blank" rel="noreferrer">Error handling</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#using-asyncawait" target="_blank" rel="noreferrer">Using async/await</a></li></ul></li></ul><h1 id="using-promises" tabindex="-1">Using promises <a class="header-anchor" href="#using-promises" aria-hidden="true">#</a></h1><p>Published on Friday, March 26, 2021</p><ul><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#introduction" target="_blank" rel="noreferrer">Introduction</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#can-i-use-promises" target="_blank" rel="noreferrer">Can I use promises?</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#how-to-use-promises" target="_blank" rel="noreferrer">How to use promises</a><ul><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#compare-to-callback" target="_blank" rel="noreferrer">Converting a callback to a promise</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#error-handling" target="_blank" rel="noreferrer">Error handling</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#using-asyncawait" target="_blank" rel="noreferrer">Using async/await</a></li></ul></li></ul><p>With the introduction of Manifest V3, many extension API methods now return promises. This document explains how to use promises.</p><p>Key Term</p><p>A <em>promise</em> is a JavaScript object that represents the eventual outcome of an asynchronous operation. For more about promises and their use, see the MDN documentation on <a href="https://developer.mozilla.org/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noreferrer">using promises</a>.</p><h2 id="introduction" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#introduction" target="_blank" rel="noreferrer">#</a> Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Promises were introduced into Chrome not long after they were included in the ES6 specification. They are an important feature of modern JavaScript, providing benefits such as:</p><ul><li>Streamlined error handling</li><li>Coding in a synchronous style for invoking asynchronous functions</li><li>A simple &quot;fork and join&quot; syntax for invoking concurrent functions</li></ul><p>In Manifest V2 extension developers could use libraries to &quot;promisify&quot; Chrome&#39;s extensions APIs. With the introduction of Manifest V3 many of Chrome&#39;s extensions APIs now return promises. The Chrome team is also progressively adding promise support to additional APIs.</p><p>Gotchas</p><p>Promises are not returned by extension APIs under Manifest V2, and are not yet available on all methods in Manifest V3.</p><p>Promises can and should be used in many circumstances. However, there are times (for example, event listeners) when a promise won&#39;t work and a callback is more appropriate. Methods that support promises also support callbacks to provide backwards compatibility.</p><h2 id="can-i-use-promises" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#can-i-use-promises" target="_blank" rel="noreferrer">#</a> Can I use promises? <a class="header-anchor" href="#can-i-use-promises" aria-hidden="true">#</a></h2><p>You can and should use promises in your extension code, where a promise is available and appropriate to the use case.</p><p>Not all methods in extensions APIs support promises. Sometimes that&#39;s because we haven&#39;t added promise support on the method yet; in many cases it&#39;s because using a promise isn&#39;t feasible for the method.</p><p>You can check whether a method supports promises by checking its API reference page:</p><p>![captureVisibleTab is a method that supports promises as demonstrated in the API reference](./Using promises - Chrome Developers_files/AYQVtnh19vNMHoXzxZB1.png)</p><p>The example method, <code>captureVisibleTab()</code>, can be found in the <a href="https://developer.chrome.com/docs/extensions/reference/tabs/#methods" target="_blank" rel="noreferrer"><code>chrome.tabs</code></a> API. This method supports promises because one of the method&#39;s signatures returns a promise. To make this easier to see at a glance, the reference docs also display a <code>Promise</code> pill below the signatures.</p><h2 id="how-to-use-promises" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#how-to-use-promises" target="_blank" rel="noreferrer">#</a> How to use promises <a class="header-anchor" href="#how-to-use-promises" aria-hidden="true">#</a></h2><p>There are many places where using promises will result in cleaner, easier-to-maintain code. You should consider using promises in situations such as the following:</p><ul><li>Any time that you want to clean up your code by using a more &quot;synchronous&quot; invocation style.</li><li>Where error handling would be too difficult using callbacks.</li><li>When you want a more condensed way to invoke several concurrent methods and gather the results into a single thread of code.</li></ul><h3 id="converting-a-callback-to-a-promise" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#compare-to-callback" target="_blank" rel="noreferrer">#</a> Converting a callback to a promise <a class="header-anchor" href="#converting-a-callback-to-a-promise" aria-hidden="true">#</a></h3><p>One way to understand how you can use promises in extensions APIs is to compare two equivalent code fragments, one using a callback and one using a promise. The following example shows this comparison:</p><h4 id="standard-callback-implementation" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#standard-callback-implementation" target="_blank" rel="noreferrer">#</a> Standard callback implementation <a class="header-anchor" href="#standard-callback-implementation" aria-hidden="true">#</a></h4><pre><code>function openTabOnRight(onComplete) {  chrome.tabs.query(queryOptions, function(tabs) {    if (chrome.runtime.lastError) {      onComplete({error: chrome.runtime.lastError});      return;    }    if (!tabs.length) {      onComplete();      return;    };    chrome.tabs.create({      url: &#39;https://example.com&#39;,      index: tab[0].index + 1,    }, function(tab) {      if (chrome.runtime.lastError) {        onComplete({error: chrome.runtime.lastError});      }      console.log(&#39;tab created&#39;, tab);      onComplete(tab);    });  });}
</code></pre><h4 id="promise-implementation" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#promise-implementation" target="_blank" rel="noreferrer">#</a> Promise implementation <a class="header-anchor" href="#promise-implementation" aria-hidden="true">#</a></h4><pre><code>// This sample does not have explicit error handlers because errors// are automatically propagated down the promise chain.function openTabOnRight() {  return chrome.tabs.query(queryOptions)    .then((tabs) =&gt; {      if (!tabs.length) return;      return chrome.tabs.create({        url: &#39;https://example.com&#39;,        index: tab[0].index + 1,      });    })    .then(tab =&gt; {      if (!tab) return;      console.log(&#39;tab created&#39;, tab);      return tab;    });}
</code></pre><h3 id="error-handling" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#error-handling" target="_blank" rel="noreferrer">#</a> Error handling <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h3><p>Returning errors works differently depending on whether the extension is using a callback or a promise.</p><h4 id="error-handling-with-callbacks" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#error-handling-with-callbacks" target="_blank" rel="noreferrer">#</a> Error handling with callbacks <a class="header-anchor" href="#error-handling-with-callbacks" aria-hidden="true">#</a></h4><p>If using a callback, then <code>chrome.runtime.lastError</code> is set for the duration of the execution of the callback. It is not thrown as a JS Error (which would interrupt JS execution), and is not set outside the duration of the callback run (which would result in it being &quot;randomly&quot; set during other execution). The extension would look at the last error like this:</p><pre><code>chrome.tabs.create({...}, (result) =&gt; {  if (chrome.runtime.lastError) {    // Handle last error  }});
</code></pre><h4 id="error-handling-with-promises" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#error-handling-with-promises" target="_blank" rel="noreferrer">#</a> Error handling with promises <a class="header-anchor" href="#error-handling-with-promises" aria-hidden="true">#</a></h4><p>Promises are designed to deliver asynchronous results, both success and failure. A failure in a promise (a promise rejection) is handled differently. It might look like this:</p><pre><code>chrome.tabs.create({...})  .then((result) =&gt; {    // success case  })  .catch((error) =&gt; {    // failure case  });
</code></pre><p>Extensions APIs don&#39;t set <code>chrome.runtime.lastError</code> when you use a promise; instead they provide the error as an argument to the function in the <code>.catch()</code>.</p><p>In simpler cases with a single promise, you can instead supply your error handler as the second parameter to <code>.then()</code> instead of chaining to a <code>.catch()</code>. For more about this topic, see this <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise#chained_promises" target="_blank" rel="noreferrer">MDN article on chained promises</a>.</p><p>Whether you receive the error using <code>.catch()</code> or the optional second parameter of <code>.then()</code>, this form of error handling helps you write async logic in a more synchronous style.</p><h3 id="using-async-await" tabindex="-1"><a href="https://developer.chrome.com/docs/extensions/mv3/promises/#using-asyncawait" target="_blank" rel="noreferrer">#</a> Using async/await <a class="header-anchor" href="#using-async-await" aria-hidden="true">#</a></h3><p>JavaScript also provides async/await as syntactic sugar on top of promises, letting you code in a more imperative style. The following example shows how to implement the <a href="https://developer.chrome.com/docs/extensions/mv3/promises/#compare-to-callback" target="_blank" rel="noreferrer">example shown earlier</a> using async/await:</p><pre><code>// Async/await implementationasync function openTabOnRight() {  // When not wrapped in try/catch, errors thrown in an async  // function will propagate down the promise chain  let tabs = await chrome.tabs.query(queryOptions);  if (!tabs.length) return;  let tab = await chrome.tabs.create({    url: &#39;https://example.com&#39;,    index: tab[0].index + 1,  });  if (!tab) return;  console.log(&#39;tab created&#39;, tab);  return tab;}
</code></pre><p>Note that <code>await</code> is only valid in async functions and the top-level bodies of modules. You can load your background service worker as a module by setting <code>&quot;type&quot;: &quot;module&quot;</code> in the &quot;background&quot; key of your extension&#39;s <a href="https://developer.chrome.com/docs/extensions/mv3/manifest/" target="_blank" rel="noreferrer">manifest</a>.</p><p>Updated on Friday, March 26, 2021 \u2022 <a href="https://github.com/GoogleChrome/developer.chrome.com/blob/main/site/en/docs/extensions/mv3/promises/index.md" target="_blank" rel="noreferrer">Improve article</a></p>`,45),n=[s];function i(c,l,h,p,d,m){return r(),o("div",null,n)}const f=e(a,[["render",i]]);export{g as __pageData,f as default};
